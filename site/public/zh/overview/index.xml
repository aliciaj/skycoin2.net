<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overviews on 天空币博客</title>
    <link>https://www.skycoin.net/zh/overview/</link>
    <description>Recent content in Overviews on 天空币博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.skycoin.net/zh/overview/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CX Overview</title>
      <link>https://www.skycoin.net/zh/overview/cx-overview/</link>
      <pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.skycoin.net/zh/overview/cx-overview/</guid>
      <description>CX 简介 项目仓库 语法 Affordances  数量限制 类型限制 存在性限制 标识符限制 边界限制 用户自定义限制  严格的类型系统 编译和解释  读-求值-打印循环 元编程命令 步进 交互性调试  集成的进化算法 序列化  CX 简介 CX既是一种规范又是一门编程语言，旨在基于affordance(译者注: affordance没有好的中文翻译词，保留原单词)概念来接受新的编程范式。affordances允许程序知道它可以做什么不可以做什么。我们可以问程序什么样的参数可以被传给函数，程序就会返回一系列可能的动作。当选定这一系列动作中哪个是合适的，我们就可以在其中做出一个选择，然后程序会按照选择的动作执行。由于CX的affordances系统，基因编程算法就可以建立在其基础之上并作为一个原生函数，这可以用来优化程序的运行时结构。
CX规范指出程序员对编译器和解释器必须是可访问的。解释器可以通过读取-求值-打印(read-eval-print)的这一循环来访问，在这个循环里面，程序员可以交互式的增加和删除程序里面的元素。一旦程序运行结束，它可以被编译出来以增强程序的性能。
最后，一个CX程序可以被完全的序列化为字节数组，并保持程序运行状态和结构。被序列化的程序之后又可以反序列化，并可以继续运行在安装有CX解释器/编译器的设备上。
在接下来的章节中，会对在上述段落中讨论的CX的特性进行更加详细的描述。
项目仓库 这个项目的源码可以在Github仓库下载:https://github.com/skycoin/cx. 该仓库包含了说明书，文档，例子和源码本身。
语法 正如在概述中提到，CX既是一种规范又是一门编程语言。 CX规范并没有对语法进行限定死=，而是规定了CX规范的结构和满足CX规范的CX方言必须实现的过程（process）。因此，可以实现两种像这样CX方言，一种类Lisp语法，一种类C语法。这种底层语言叫做基于CX的语言，或者叫做“基础语言”。 在文档中，有一种实现用来展示CX规范的能力，它的目的不仅仅是作为学术工具，而是作为一门完整并且健壮的通用编程语言。
CX在本文档中的目标是尽可能做到和Go语言语法相似。
Affordances 程序员在构建程序的时候往往需要做出大量的决策，比如说，函数需要接受和返回多少个参数，需要哪些语句才能得到想要的功能，需要给函数传递什么参数，诸如此类。CX规范中的Affordances系统可以通过查询得到一系列可能的可应用在某个元素（element)的动作(action)，其中函数（function)，结构（struct)，模块 （module）和表达式(expression)都是元素的例子。
没有一系列的规则和事实指导什么是必要的逻辑和程序背后的意图，人们至少可以决定一些保证程序语义正确的基本约束。affordance系统提供这样的第一层约束。接下来会详细解释。
数量限制 CX中的表达式可以返回多个值。由于接受表达式输出的参数需要匹配表达式操作符的输出数量，这对affordance系统构成了一个挑战。
out1, out2, ..., outN := op(inp1, inp2, ..., inpM)  如果上面的例子是正确的，那么*op*需要输出*N*个参数。这个问题可能会变得更有挑战性如果我们考虑到*op*的定义可以由affordance系统自己改变或者被将来的用户改变。只要*op*的定义改变了，新的affordances可以应用到任何使用*op*作为它的操作符的表达式。因为接收*op*的输出参数的变量个数现在已经不匹配了。
从之前的推理来看，如果接收的参数和表达式的操作符输出的参数个数相匹配，那么增加新的接收变量的操作将永远不会执行。
数量限制同样适用于表达式中的输入参数，例如，如果函数调用已经定义了所有的输入参数，那么affordance系统不应该再列出增加另一个参数作为可能的行为。同样，如果表达式试着调用操作符的参数少于所需参数，那么affordance系统在需要的时候，应该告诉程序员新增一个函数调用的参数也是可行的。
Example:
注意: 字符串连接功能还未实现。同样，print函数总是在要被打印的字符串后面增加一个新行。在将来的CX的实现版本中会解决这些问题。
var age i32 = 18 var steps i32 = 23 func advance (direction str, numberSteps i32) () { printStr(&amp;quot;Advancing:&amp;quot;) printStr(direction) printStr(&amp;quot;Number of steps:&amp;quot;) printI32(numberSteps) } func main () () { advance(&amp;quot;North&amp;quot;) }  上面的例子中，*main*函数中的*advance*调用缺少一个参数。如果查询affordance系统，系统会列出一些列行为类似于:</description>
    </item>
    
    <item>
      <title>Skywire - 天空币网状网项目</title>
      <link>https://www.skycoin.net/zh/overview/skywire---skycoin-meshnet-project/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.skycoin.net/zh/overview/skywire---skycoin-meshnet-project/</guid>
      <description>简介 路由: 概览 激励措施：付款协议 源路由：链路层加密  协议例子，节点A和B通信 可能的改进：  IPv4网关：绕过现有的ISPs  例子1: 例子2:  Skywire守护进程服务架构：  示例服务：区块链同步  查找Peers： 发送接收消息。   多主路由和链路聚合： Meshnet路由：存储和转发 存储和转发：容量利用率 存储和转发：示例  正常运行示例 拥塞的例子 丢包的例子  存储和转发：带宽延迟产品 存储和转发：容量利用，质量和服务 源路由：多路由移动连接 源路由：多路可靠性 源路由：Guard节点 源路由：BGP的限制 虚拟路由：Skywire网络拓扑扩展性 源路由：虚拟路由，SONET拓扑 源路由：不对称连接 源路由：路由发现  简介 Skywire 项目目标:
 针对最后一公里的宽带网络，提供一个当前互联网接入提供商们(ISPs)的额外选择，以增加带宽竞争 激励社区来构建运行在用户操作基础架构上的ISPs.  Skywire 是一个新的暗网协议.
 低延迟 (和TCP/IP一样快，如运行在原生网络则理论上比TCP/IP更快) 高性能(被设计用来处理视频、文件共享和其它高吞吐的应用) 隐私保护 支持在WIFI上运行 (网状网) 支持在明网上运行 (叠加暗网)  Skywire解决了网络部署的激励和逃离问题。
 用户通过提供网络资源来获得天空币 用户通过消耗网络资源来花费天空币  Skywire 是开放接入的.</description>
    </item>
    
    <item>
      <title>Skycoin Overview 天空币概述</title>
      <link>https://www.skycoin.net/zh/overview/skycoin-overview/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.skycoin.net/zh/overview/skycoin-overview/</guid>
      <description>天空币介绍 比特币及当前区块链协议的创新和缺陷 比特币的创新 比特币的主要缺陷 分布共识协议的财务账本的可取性 天空币的安全理念 透明性和安全性：Obelisk共识机制和公共广播频道 Obelisk共识机制 简单的二进制共识算法：在两个区块之间进行选择 多重并发分支选择共识  天空币介绍 天空币是基于一种新的被称为公共广播频道的加密原语的技术。它也引入了一种称为Obelisk的新共识算法实施。Obelisk减少了比特币底层的工作量证明及挖矿过程所带来的承诺问题，从而解决了大量与挖矿有关的安全问题。Obelisk并非一个算法，而是使用多重技术来实现某个安全保证的实施方案。
比特币及当前区块链协议的创新和缺陷 在比特币里，新的交易数据是保存进入区块里的，区块附加在区块链上。比特币网络里任何人都可以创造新的区块。因此每个区块都有一个单独的母块，但是有一个或多个有效地继承块（孩子）。多条链形成了一棵树，比特币解决的核心问题是让网络中的每个节点对应链树上那一条未来的链是共识区块链从而达成一致。
比特币使用了工作量（POW）证明的技术来确定一条独一无二的区块链。一个有效地区块需要一个低于目标值的哈希值。节点将交易数据加到新的区块里，随机尝试任一数直到一个区块的有效哈希值被找到。
在区块树中使用一个功能来创造一个链的总排序。拥有最高难度和需要最多哈希值操作的链将产生&amp;quot;最长的链&amp;quot;，最终形成共识链。&amp;quot;区块深度&amp;quot;和&amp;quot;难度&amp;quot;创造了区块树中所有直链的总排序。只有耗费资源最密集的链被接受产生共识链。
比特币节点之间随机连接，每个节点传递它所知道的难度最大的区块链。如果一个节点有一个比其它节点更难产生的链，则节点将按照顺序接收区块。节点将评估其功能并决定接收到的链是否更难产生，从而有可能将它的共识转到接收的链上。然后节点将这条新链广播给其它节点。通过这种方式，共识能够传播到整个网络，所有节点达成相同的共识。
比特币并不假设节点有身份，也不假设节点是诚实的。节点可能发给其它节点任何数据。这不会影响共识决策，因为难度是能够按照其价值进行独立验证的。
比特币的创新 * 区块链 每个人都能拥有的一个数据结构
* 可以交易的公共账本 在区块链里存储财务交易
* 使用工作量证明（POW）和重新定位难度来维持区块产生的恒定速度。 * 使用公钥哈希值作为地址 公钥在使用前不会被公开
* 使用&amp;quot;输出&amp;quot;作为余额 排除尝试创造可分割的数字现金：从一个$25的输出数据，以支付$20为例，发送$20到一个人，同时把$5发送回给自己。
* 工作量（POW）难度功能和区块深度 首次使用可以定义区块树总排序的功能。公共账本规避了传统数字现金的双重支付问题。
比特币的主要缺陷 在开发新的加密货币的解决方案时，必须解决一些问题。比特币应被视为一种萌芽期的加密货币，在此基础上未来的发展需要进一步完善。天空币的技术通过重新设计整个分布式协议系统以便解决比特币的主要缺陷。
* 比特币里的共识决策不是最终性的，可以被复原。 个人或组织可以租用或者购买足够的哈希算力来复原交易。
* 比特币可以达到网络共识，但是单独的比特币节点是容易遭受对手的攻击，尤其是来自那些可以控制数据包通过的路由器。 那些控制路由器的对手，对节点有绝对的控制力，可以专横地影响节点的共识决策。
* 比特币交易所极度容易遭受攻击 熟练的攻击者使用51%攻击法则， 或通过购买及销售比特币交易所的山寨币来使交易所破产。
* 银行和赌博网络易遭受51%攻击 * 随着比特币的不断成熟，购买比特币的期权和攻击网络变得更有利可图 在未来，成功地攻击比特币可以从期权交易中获利数百万美元。
* 拥有强有力的资本控制的国家以及相互竞争的公司可能会直接攻击比特币网络来保护他们的金融利益。 这类机构可以轻易地吸收攻击网络的成本，同时危及比特币的安全。
* 允许&amp;quot;云哈希&amp;quot;和第三方哈希算力租赁的服务正变得越来越成功 很多大型矿池现在有能力租赁哈希算力来发起大多数攻击。
* 黑客可以使用路由器和网络设备里的诸多安全漏洞来窃取银行和交易所的比特币 攻击者可以控制连接到比特币节点的用户，确保他们连接到被攻击者控制的节点上。比如，一名攻击者可能往银行的侧链上引入一个存款交易，让银行发布一个可以被转发到主要网络的取款交易。
* 比特币无法以低成本提供安全 比特币网络使用大量且持续增长地用电。比特币的安全依赖于通过产生足够多的电耗量。因为安全与实现大多数哈希速率有关，运行比特币网络的成本不断提高。在一个设计良好的系统里，每1美元的安全需要1000美元的规避成本。而在比特币里，这个比例是1:1，而且从环保的角度说是不负责任的。
* 比特币从根本上无法在不牺牲安全性的前提下降低交易时间 比特币交易平均需要花10分钟才能被打包到区块中，如果需要更高的安全性，则花费的时间更长。</description>
    </item>
    
  </channel>
</rss>